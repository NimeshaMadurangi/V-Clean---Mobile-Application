import { type DefaultNavigatorOptions, type NavigatorTypeBagBase, type ParamListBase, type StackNavigationState, type StackRouterOptions, type StaticConfig, type TypedNavigator } from '@react-navigation/native';
import * as React from 'react';
import type { StackNavigationConfig, StackNavigationEventMap, StackNavigationOptions, StackNavigationProp } from '../types';
type Props = DefaultNavigatorOptions<ParamListBase, string | undefined, StackNavigationState<ParamListBase>, StackNavigationOptions, StackNavigationEventMap, StackNavigationProp<ParamListBase>> & StackRouterOptions & StackNavigationConfig;
declare function StackNavigator({ id, initialRouteName, children, layout, screenListeners, screenOptions, screenLayout, UNSTABLE_getStateForRouteNamesChange, ...rest }: Props): React.JSX.Element;
export declare function createStackNavigator<ParamList extends ParamListBase, NavigatorID extends string | undefined = undefined, TypeBag extends NavigatorTypeBagBase = {
    ParamList: ParamList;
    NavigatorID: NavigatorID;
    State: StackNavigationState<ParamList>;
    ScreenOptions: StackNavigationOptions;
    EventMap: StackNavigationEventMap;
    NavigationList: {
        [RouteName in keyof ParamList]: StackNavigationProp<ParamList, RouteName, NavigatorID>;
    };
    Navigator: typeof StackNavigator;
}, Config extends StaticConfig<TypeBag> | undefined = StaticConfig<TypeBag> | undefined>(config?: Config): TypedNavigator<TypeBag, Config>;
export {};
//# sourceMappingURL=createStackNavigator.d.ts.map