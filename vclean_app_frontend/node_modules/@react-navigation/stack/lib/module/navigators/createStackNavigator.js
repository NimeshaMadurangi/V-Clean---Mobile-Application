function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { createNavigatorFactory, StackActions, StackRouter, useLocale, useNavigationBuilder } from '@react-navigation/native';
import * as React from 'react';
import { StackView } from '../views/Stack/StackView';
function StackNavigator(_ref) {
  let {
    id,
    initialRouteName,
    children,
    layout,
    screenListeners,
    screenOptions,
    screenLayout,
    UNSTABLE_getStateForRouteNamesChange,
    ...rest
  } = _ref;
  const {
    direction
  } = useLocale();
  const {
    state,
    describe,
    descriptors,
    navigation,
    NavigationContent
  } = useNavigationBuilder(StackRouter, {
    id,
    initialRouteName,
    children,
    layout,
    screenListeners,
    screenOptions,
    screenLayout,
    UNSTABLE_getStateForRouteNamesChange
  });
  React.useEffect(() =>
  // @ts-expect-error: there may not be a tab navigator in parent
  navigation.addListener?.('tabPress', e => {
    const isFocused = navigation.isFocused();

    // Run the operation in the next frame so we're sure all listeners have been run
    // This is necessary to know if preventDefault() has been called
    requestAnimationFrame(() => {
      if (state.index > 0 && isFocused && !e.defaultPrevented) {
        // When user taps on already focused tab and we're inside the tab,
        // reset the stack to replicate native behaviour
        navigation.dispatch({
          ...StackActions.popToTop(),
          target: state.key
        });
      }
    });
  }), [navigation, state.index, state.key]);
  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {
    direction: direction,
    state: state,
    describe: describe,
    descriptors: descriptors,
    navigation: navigation
  })));
}
export function createStackNavigator(config) {
  return createNavigatorFactory(StackNavigator)(config);
}
//# sourceMappingURL=createStackNavigator.js.map